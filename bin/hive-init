#!/usr/bin/env node
/**
 * hive.js
 * Copyright (C) 2013-2015 Marcel Klehr <mklehr@gmx.net>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * This is the hive-init global subcommand
 * it will set-up a hive instance directory for you.
 */

var co = require('co')
  , prompt = require('co-prompt')
  , choose = require("chosen").choose
  , fs = require('fs')
  , winFork = require('win-fork')

co(function *() {
  var indent = '  '

  if(isExistingInstance()) {
    console.log('There is already a hive instance in this directory.')
    return
  }


  console.log('Mission: Set up your hive instance.')
  console.log('Details: 1) Create package.json, 2) Install hive components, 3) Set up config files.')


  console.log('\n1) Create package.json')

  var deps = {
    'hive-auth': '*'
  , 'hive-auth-token':'*'
  , 'hive-broadcast': '*'
  , 'hive-cli': '*'
  , 'hive-config': '*'
  , 'hive-hooks': '*'
  , 'hive-http': '*'
  , 'hive-interface-rest-api': '*'
  , 'hive-interface-shoe': '*'
  , 'hive-logger': '*'
  , 'hive-models': '*'
  , 'hive-oauth-provider': '*'
  , 'hive-orm': '*'
  , 'hive-ot': '*'
  , 'hive-queue': '*'
  , 'hive-services': '*'
  , 'hive-sync': '*'
  , 'hive-ui': '*'
  , 'hive-ui-session': '*'
  , 'hive-ui-editor': '*'
  , 'hive-ui-api': '*'
  , 'gulf': '3.x'
  , 'architect': '0.1.x'
  }

  console.log('Choose one of the following database adapters:')
  var db = yield function(cb) {
    choose([
      'sails-postgresql'
    , 'sails-mysql'
    , 'sails-mongo'
    , 'sails-redis'
    , 'sails-disk'
    , 'sails-memory'
    ]
    , function(answer){
      cb(null, answer)
    })
  }
  deps[db] = '*'

  var dbConfigTemplates = {
    'sails-postgresql': {
      database: 'databaseName',
      host: 'localhost',
      user: 'root',
      password: '',
      port: 5432,
      poolSize: 10,
      ssl: false
    },
    'sails-mysql': {
      host      : 'localhost',
      port      : 3306,
      user      : 'username',
      password  : 'password',
      database  : 'MySQL Database Name'
    },
    'sails-mongo': {
      host: 'localhost',
      port: 27017,
      user: 'username_here',
      password: 'password_here',
      database: 'database_name_here'
    },
    'sails-redis': {
      port: 6379,
      host: 'localhost',
      password: null,
      database: null
    },
    'sails-disk': null,
    'sails-memory': null
  }

  var dbConfig = dbConfigTemplates[db]
  dbConfig.adapter = db

  console.log('Choose one of the following broadcast transports:')
  var broadcast = yield function(cb) {
    choose([
      'hive-broadcast-memory'
    , 'hive-broadcast-smokesignal'
    ]
    , function(answer){
      cb(null, answer)
    })
  }
  deps[broadcast] = '*'

  var packageJson = {
    name: 'Hive.js'
  , version: '0.1.0'
  , description: 'Your hive.js instance'
  , dependencies: deps
  , private: true
  , hive: true
  }

  console.log(indent+'Writing package.json...')
  fs.writeFileSync(process.cwd()+'/package.json', JSON.stringify(packageJson, null, '  '))

  console.log(indent+'✔')


  console.log('\n2) Install hive components')

  console.log(indent+'installing the following components...\n', packageJson.dependencies)

  var exitCode = yield spawn('npm', ['update', '--loglevel=warn'], {
    stdio: 'inherit'
  , cwd: process.cwd()
  , env: process.env
  , detached: false
  })

  if(exitCode != 0) {
    console.log('\n'+indent+'Mh. npm seems to have failed. You\'ll have to install the components yourself.')
  }else {
    console.log(indent+'✔')
  }


  console.log('\n3) Set up config files')

  var config = {
    ui: {
      baseURL: 'https://localhost:1235'
    },
    http: {
      port: 1235
    },
    orm: {
      adapters: [db]
    , connections: {default: dbConfig}
    },
    'auth-token': {
      secret: 'sssh'
    },
    queue: {
      port: 12351
    , address: "127.0.0.1"
    },
    logger: {
      appenders: [
        { type: "console" }
      ]
    }
  }

  if(broadcast === 'hive-broadcast-smokesignal') {
    config['broadcast-smokesignal'] = {
      "networkMask": "192.168.2.1/255.255.255.0"
    , "port": 12352
    , "seeds": [
        {"address":"192.168.2.100", "port":12352}
      ]
    }
  }

  var configdir = process.cwd()+'/config'
  fs.mkdirSync(configdir)
  ;['development', 'test', 'production']
    .forEach(function(env) {
      fs.writeFileSync(configdir+'/'+env+'.json', JSON.stringify(config, null, '  ')
      console.log(indent+'- config/'+env+'.json')
    })

  console.log(indent+'✔')


  console.log('\nMission complete.')
}).then(
  function() {process.exit()},
  function(er) {
    throw er;
  }
)

function spawn(cmd, args, opts) {
  return function(cb) {
    winFork(cmd, args, opts)
      .on('error', function(er) {
        cb(er)
      })
      .on('close', function(code) {
        cb(null, code)
      })
  }
}

function isExistingInstance() {
  try {
    var pack = require(process.cwd()+'/package.json')
    return pack.hive
  }catch(e) {
    return false
  }
}
