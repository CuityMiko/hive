#!/usr/bin/env node
/**
 * This is the hive-init global subcommand
 * it will set-up a hive instance directory for you.
 */

var co = require('co')
  , prompt = require('co-prompt')
  , fs = require('fs')
  , winFork = require('win-fork')

co(function *() {
  var indent = '  '

  if(isExistingInstance()) {
    console.log('There is already a hive instance in this directory.')
    return
  }


  console.log('Mission: Set up your hive instance.')
  console.log('Details: 1) Create package.json, 2) Install hive components, 3) Set up config files.')


  console.log('\n1) Create package.json')

  var packageJson = {
    name: yield prompt(indent+'Instance name: ')
  , version: '0.0.0'
  , description: yield prompt(indent+'Instance description: ')
  , dependencies: {
      'hive-config': '*'
    , 'hive-cli': '*'
    , 'hive-hooks': '*'
    , 'hive-services': '*'
    , 'hive-worker-pool': '*'
    , 'hive-worker': '*'
    , 'hive-orm': '*'
    , 'hive-model': '*'
    , 'hive-http': '*'
    }
  , private: true
  , hive: true
  }

  console.log(indent+'Writing package.json...')
  fs.writeFileSync(process.cwd()+'/package.json', JSON.stringify(packageJson, null, '  '))

  console.log(indent+'✔')


  console.log('\n2) Install hive components')

  console.log(indent+'installing the following components...\n', packageJson.dependencies)

  var exitCode = yield spawn('npm', ['update', '--loglevel=warn'], {
    stdio: 'inherit'
  , cwd: process.cwd()
  , env: process.env
  , detached: false
  })

  if(exitCode != 0) {
    console.log('\n'+indent+'Mh. npm seems to have failed. You\'ll have to install the components yourself.')
  }else {
    console.log(indent+'✔')
  }


  console.log('\n3) Set up config files')

  var configdir = process.cwd()+'/config'
  fs.mkdirSync(configdir)
  ;['development', 'test', 'production']
    .forEach(function(env) {
      fs.writeFileSync(configdir+'/'+env+'.json', '{\n}')
      console.log(indent+'- config/'+env+'.json')
    })

  console.log(indent+'✔')


  console.log('\nMission complete.')
})(function(er) {
  if(er) throw er;
  process.exit()
})

function spawn(cmd, args, opts) {
  return function(cb) {
    winFork(cmd, args, opts)
      .on('error', function(er) {
        cb(er)
      })
      .on('close', function(code) {
        cb(null, code)
      })
  }
}

function isExistingInstance() {
  try {
    var pack = require(process.cwd()+'/package.json')
    return pack.hive
  }catch(e) {
    return false
  }
}
